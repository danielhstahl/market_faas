'use strict'
const {location, timeout}=require('./binaryLocation.json')
const command=`sudo docker run --rm -v "$PWD":/var/task -i -e DOCKER_LAMBDA_USE_STDIN=1 lambci/lambda:provided -bootstrap ${location}/market_faas`

const {exec} = require('child_process')
const spawnCommand=(jsonFile, callback)=>{
    exec('cat '+jsonFile+' | '+command, callback)
}
jest.setTimeout(timeout)
describe('bond', ()=>{
    it('returns histogram ', done=>{
        spawnCommand('./tests/parameterBond.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            expect(Object.keys(res).length).toBeGreaterThan(0)
            done()
        })
    })
    it('returns error if not all parameters included', done=>{
        spawnCommand('./tests/genericError.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            //this error is generated by serde, not me
            expect(res.err).toBeDefined()
            done()
        })
    })
})
describe('bondcall', ()=>{
    it('returns histogram ', done=>{
        spawnCommand('./tests/parameterBondCall.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            expect(Object.keys(res).length).toBeGreaterThan(0)
            done()
        })
    })
    it('returns error if not all parameters included', done=>{
        spawnCommand('./tests/genericError.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            //this error is generated by serde, not me
            expect(res.err).toBeDefined()
            done()
        })
    })
})
describe('bondput', ()=>{
    it('returns histogram ', done=>{
        spawnCommand('./tests/parameterBondPut.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            expect(Object.keys(res).length).toBeGreaterThan(0)
            done()
        })
    })
    it('returns error if not all parameters included', done=>{
        spawnCommand('./tests/genericError.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            //this error is generated by serde, not me
            expect(res.err).toBeDefined()
            done()
        })
    })
})
describe('caplet', ()=>{
    it('returns histogram ', done=>{
        spawnCommand('./tests/parameterCaplet.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            expect(Object.keys(res).length).toBeGreaterThan(0)
            done()
        })
    })
    it('returns error if not all parameters included', done=>{
        spawnCommand('./tests/genericError.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            //this error is generated by serde, not me
            expect(res.err).toBeDefined()
            done()
        })
    })
})
describe('edf', ()=>{
    it('returns histogram ', done=>{
        spawnCommand('./tests/parameterEDF.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            expect(Object.keys(res).length).toBeGreaterThan(0)
            done()
        })
    })
    it('returns error if not all parameters included', done=>{
        spawnCommand('./tests/genericError.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            //this error is generated by serde, not me
            expect(res.err).toBeDefined()
            done()
        })
    })
})
describe('swap', ()=>{
    it('returns histogram ', done=>{
        spawnCommand('./tests/parameterSwap.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            expect(Object.keys(res).length).toBeGreaterThan(0)
            done()
        })
    })
    it('returns error if not all parameters included', done=>{
        spawnCommand('./tests/genericError.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            //this error is generated by serde, not me
            expect(res.err).toBeDefined()
            done()
        })
    })
})
describe('european swaption', ()=>{
    it('returns histogram ', done=>{
        spawnCommand('./tests/parameterEuropeanSwaption.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            expect(Object.keys(res).length).toBeGreaterThan(0)
            done()
        })
    })
    it('returns error if not all parameters included', done=>{
        spawnCommand('./tests/genericError.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            //this error is generated by serde, not me
            expect(res.err).toBeDefined()
            done()
        })
    })
})
describe('american swaption', ()=>{
    it('returns histogram ', done=>{
        spawnCommand('./tests/parameterAmericanSwaption.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            expect(Object.keys(res).length).toBeGreaterThan(0)
            done()
        })
    })
    it('returns error if not all parameters included', done=>{
        spawnCommand('./tests/genericError.json', (err, result)=>{
            if(err){
                throw(err)
            }
            const res=JSON.parse(JSON.parse(result).body)
            //this error is generated by serde, not me
            expect(res.err).toBeDefined()
            done()
        })
    })
})